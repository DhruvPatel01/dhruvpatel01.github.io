<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dhruv Patel</title>
    <link>https://DhruvPatel01.github.io/</link>
    <description>Recent content on Dhruv Patel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Dhruv Patel</copyright>
    <lastBuildDate>Wed, 14 Apr 2021 21:51:48 +0530</lastBuildDate><atom:link href="https://DhruvPatel01.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python got me with circular imports!</title>
      <link>https://DhruvPatel01.github.io/posts/python_circular_imports/</link>
      <pubDate>Wed, 14 Apr 2021 21:51:48 +0530</pubDate>
      
      <guid>https://DhruvPatel01.github.io/posts/python_circular_imports/</guid>
      <description>I have been programming in Python from last seven years. Apart from the new features Python adds in every new release, I didn&amp;rsquo;t think Python would surprise me, until it did.
I will demonstrate what happened with the trimmed down code. I have two files, main.py and notmain.py. main.py has a global variable called var. notmain has some code that would process user input and add entry into main.var. Pretty simple, right?</description>
      <content>&lt;p&gt;I have been programming in Python from last seven years. Apart from the new features Python adds in every new release, I didn&amp;rsquo;t think Python would surprise me, until it did.&lt;/p&gt;
&lt;p&gt;I will demonstrate what happened with the trimmed down code. I have two files, &lt;code&gt;main.py&lt;/code&gt; and &lt;code&gt;notmain.py&lt;/code&gt;. &lt;code&gt;main.py&lt;/code&gt; has a global variable called &lt;code&gt;var&lt;/code&gt;. &lt;code&gt;notmain&lt;/code&gt; has some code that would process user input and add entry into &lt;code&gt;main.var&lt;/code&gt;. Pretty simple, right?&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;248963157&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;248963157&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;main.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Hide&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import notmain

var = {}

def work():
    print(&amp;#34;Before:&amp;#34;, var)
    notmain.populate()
    print(&amp;#34;After: &amp;#34;, var)

if __name__ == &amp;#39;__main__&amp;#39;:
    work()

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;562817934&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;562817934&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;notmain.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Hide&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import main

def populate():
    main.var[&amp;#39;answer&amp;#39;] = 42
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;What do you think will happen when I run &lt;code&gt;python main.py&lt;/code&gt;? Don&amp;rsquo;t know about you, but I imagined that after I call &lt;code&gt;notmain.populate&lt;/code&gt;, &lt;code&gt;main.var&lt;/code&gt; will have one key, value in it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Shell&amp;gt; python main.py
Before: {}
After:  {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But boy I was wrong. To explain what just happened, let me try to explain how Python imports work.&lt;/p&gt;
&lt;h2 id=&#34;how-does-python-import-work-a-simple-version&#34;&gt;How does Python import work? (A simple version)&lt;/h2&gt;
&lt;p&gt;In what follows, I only explain what happens when you use &lt;code&gt;import x&lt;/code&gt;. &lt;code&gt;from x import y&lt;/code&gt; is not explained here.&lt;/p&gt;
&lt;p&gt;When you import a module, two steps happen.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Search (done by finder)&lt;/li&gt;
&lt;li&gt;Load (done by loader)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the search step, &lt;code&gt;sys.modules&lt;/code&gt; is the first place checked. If the module is not in &lt;code&gt;sys.modules&lt;/code&gt;, Python will search for that module in other ways, current directory being one of them. Once the module(which was not in &lt;code&gt;sys.modules&lt;/code&gt;) is found, it will be added to &lt;code&gt;sys.modules&lt;/code&gt; before step 2 is executed. Thus if &lt;code&gt;a&lt;/code&gt; imports &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt; imports &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; imports &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; will not be executed again.&lt;/p&gt;
&lt;p&gt;If the module was not found in &lt;code&gt;sys.modules&lt;/code&gt;, the loading step will execute the module and the exported variables will be made available in the importee module.&lt;/p&gt;
&lt;p&gt;One thing you should note is that everything in Python is an object. Even the imported module is. Try this,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; types
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isinstance(math, types&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ModuleType)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Objects are stored somewhere in memory. Try this,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(hex(id(math)))
&lt;span style=&#34;color:#75715e&#34;&gt;# printed &amp;#39;0x7f7e21029c20&amp;#39; on my machine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So everything in the object module will be available as attributes.&lt;/p&gt;
&lt;p&gt;Now that we know how import works, let&amp;rsquo;s try to see what happened with my code.&lt;/p&gt;
&lt;h2 id=&#34;what-happened-with-my-code&#34;&gt;What happened with my code?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s augment the files to print location of &lt;code&gt;var&lt;/code&gt; object. That shall give some ideas.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;691723548&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;691723548&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;main.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Hide&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import notmain

var = {}
print(&amp;#34;In Main: &amp;#34;, hex(id(var)))

def work():
    print(&amp;#34;Before:&amp;#34;, var, &amp;#39;at&amp;#39;, hex(id(var)))
    notmain.populate()
    print(&amp;#34;After: &amp;#34;, var, &amp;#39;at&amp;#39;, hex(id(var)))


if __name__ == &amp;#39;__main__&amp;#39;:
    work()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;496372185&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;496372185&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;notmain.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Hide&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import main

def populate():
    main.var[&amp;#39;answer&amp;#39;] = 42
    print(&amp;#39;In not main: &amp;#39;, main.var, &amp;#39;at&amp;#39;, hex(id(main.var)))

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;pre&gt;&lt;code&gt;Shell&amp;gt; python main.py
In Main:  0x7f64e4778cc0
In Main:  0x7f64e490c6c0
Before: {} at 0x7f64e490c6c0
In not main:  {&#39;answer&#39;: 42} at 0x7f64e4778cc0
After:  {} at 0x7f64e490c6c0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First of all notice that &lt;code&gt;In Main: ...&lt;/code&gt; line is printed two times. In the previous section I did tell that &lt;strong&gt;if the module is found in &lt;code&gt;sys.modules&lt;/code&gt;&lt;/strong&gt;, the module will not be executed again. The problem is that &lt;code&gt;main.py&lt;/code&gt; is only imported once, but executed twice.&lt;/p&gt;
&lt;p&gt;Here is what happens.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python main.py&lt;/code&gt; starts executing.&lt;/li&gt;
&lt;li&gt;The first line is &lt;code&gt;import notmain&lt;/code&gt;. Since &lt;code&gt;notmain&lt;/code&gt; is not in &lt;code&gt;sys.modules&lt;/code&gt; yet, it will be executed next. Notice that &lt;code&gt;main&lt;/code&gt; was never imported. So &lt;code&gt;sys.modules&lt;/code&gt; does not have an entry for &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Control goes to &lt;code&gt;notmain.py&lt;/code&gt;. First line of it is &lt;code&gt;import main&lt;/code&gt;, and as &lt;code&gt;main&lt;/code&gt; is not in the cache, finder adds it into &lt;code&gt;sys.modules&lt;/code&gt; and then loader starts executing &lt;code&gt;main.py&lt;/code&gt; (again!).&lt;/li&gt;
&lt;li&gt;Control goes to &lt;code&gt;main.py&lt;/code&gt;. Since the first line is &lt;code&gt;import notmain&lt;/code&gt; and &lt;code&gt;notmain&lt;/code&gt; &lt;strong&gt;is in&lt;/strong&gt; the &lt;code&gt;sys.modules&lt;/code&gt; now, there is no effect.&lt;/li&gt;
&lt;li&gt;Next line in &lt;code&gt;main.py&lt;/code&gt; creates a variable &lt;code&gt;var@0x7f64e4778cc0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next few lines defines a function &lt;code&gt;work&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;__name__ == &#39;__main__&#39;&lt;/code&gt; condition is false, as at the moment &lt;code&gt;__name__ == &#39;main&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Control goes back to &lt;code&gt;notmain.py&lt;/code&gt;. Attributes from the &lt;code&gt;main&lt;/code&gt; module will now be accessible.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;populate&lt;/code&gt; is defined in &lt;code&gt;notmain&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Control comes back to &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Variable &lt;code&gt;var&lt;/code&gt; is created (again!) and stored at &lt;code&gt;0x7f64e490c6c0&lt;/code&gt;. Notice that there are two &lt;code&gt;var&lt;/code&gt; variables. &lt;code&gt;notmain&lt;/code&gt; has no idea that there is another &lt;code&gt;var&lt;/code&gt; at &lt;code&gt;0x7f64e490c6c0&lt;/code&gt;, it still thinks that &lt;code&gt;main.var&lt;/code&gt; is at &lt;code&gt;0x7f64e4778cc0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;work&lt;/code&gt; function is defined.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__name__ == &#39;__main__&#39;&lt;/code&gt; condition evaluates to true this time. So &lt;code&gt;work&lt;/code&gt; is called, which calls &lt;code&gt;notmain.populate&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notmain.populate&lt;/code&gt; adds &lt;code&gt;answer&lt;/code&gt; key into &lt;code&gt;main.var&lt;/code&gt; and not &lt;code&gt;__main__.var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The issue is self-evident now. We need to distinguish between &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;__main__&lt;/code&gt;. A simple solution is to create another file that imports &lt;code&gt;main&lt;/code&gt; and then calls &lt;code&gt;main.work&lt;/code&gt;. This way when &lt;code&gt;notmain&lt;/code&gt; calls import, &lt;code&gt;sys.modules&lt;/code&gt; will already have an entry for &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt; will not be executed again, and both &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;notmain&lt;/code&gt; have same view of &lt;code&gt;var&lt;/code&gt;. So let&amp;rsquo;s try this.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;576849132&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;576849132&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;really_main.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;△&#34; data-label-collapse=&#34;▽&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import main

main.work()

# no change in other files
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;pre&gt;&lt;code&gt;Shell&amp;gt; python really_main.py
Before:  {}
After:   {&#39;answer&#39;: 42}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Whooo! That worked.&lt;/p&gt;
&lt;h2 id=&#34;comments&#34;&gt;Comments?&lt;/h2&gt;
&lt;p&gt;You have any doubts? Any feedbacks? Please reach out to me at &lt;code&gt;hello at domain&lt;/code&gt; with subject line &lt;code&gt;Comment: Post title&lt;/code&gt;. I&amp;rsquo;ll get back to you as soon as possible.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>NotAeroCalc Part 1: What is NotAeroCalc and how to use it?</title>
      <link>https://DhruvPatel01.github.io/posts/notaerocalc/notaerocalc_part1/</link>
      <pubDate>Sat, 03 Apr 2021 18:04:02 +0530</pubDate>
      
      <guid>https://DhruvPatel01.github.io/posts/notaerocalc/notaerocalc_part1/</guid>
      <description>I am a Computer Engineer by education and by training. Luckily, we computer engineers do not have to deal with different units. All our units are power of 2. We have sensible names, Kilo, Mega, Giga, you get it. When we get unlucky, there could be a confusion of whether Kilo in the context is $ 2^{10} $ or $ 10^3 $. But that is it.
But in other engineering (and science) branches this is not the case.</description>
      <content>&lt;p&gt;I am a Computer Engineer by education and by training. Luckily, we computer engineers do not have to deal with different units. All our units are power of 2. We have sensible names, Kilo, Mega, Giga, you get it. When we get unlucky, there could be a confusion of whether Kilo in the context is $ 2^{10} $ or $ 10^3 $. But that is it.&lt;/p&gt;
&lt;p&gt;But in other engineering (and science) branches this is not the case. A while ago I was taking a course &amp;ldquo;Introduction Aeronautical Engineering&amp;rdquo; on edX (the course is from TUDelft). Honestly, the homework problems there were annoying, at least for me. I can understand that students in the Aero department might need to practice the conversion process.&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;Newton&lt;/code&gt;, which is also $\frac{kg * m}{s^2}$. There is an imperial unit for length called &lt;code&gt;foot&lt;/code&gt;, but you &lt;strong&gt;have to&lt;/strong&gt; convert that into SI units to be compatible with other units in the formula, because the constants in the formula use &lt;code&gt;m&lt;/code&gt;. Then there is &lt;code&gt;Celsius&lt;/code&gt; to &lt;code&gt;Kelvin&lt;/code&gt; mapping. You either have to memorize the conversion factors, or you have to make a long list of the conversion factors.&lt;/p&gt;
&lt;p&gt;Something had to be done. And I was also looking for something to do on the weekends. So I am working on  &lt;a href=&#34;https://github.com/DhruvPatel01/NotAeroCalc/&#34;&gt;NotAeroCalc&lt;/a&gt;. I kept Aero in because my primary aim is to expedite solving homework problems in that course. But many parts of the app are general and should be usable outside Aerospace engineering.&lt;/p&gt;
&lt;p&gt;Rather than explaining what NotAeroCalc does, let me show you it in action.&lt;/p&gt;
&lt;script id=&#34;asciicast-sYPyE91MGr9QOamVwnYThzlZN&#34; src=&#34;https://asciinema.org/a/sYPyE91MGr9QOamVwnYThzlZN.js&#34; async&gt;&lt;/script&gt;
&lt;p&gt;You might have noticed a few things. First there is a need for &lt;code&gt;*&lt;/code&gt; between quantity and its unit. I designed it this way because it simplifies the grammar. Another thing is that units are not pluralized, e.g. it is &lt;code&gt;32000 foot&lt;/code&gt; and not &lt;code&gt;32000 feet&lt;/code&gt;. If you need your answer in SI units just use &lt;code&gt;expression in si&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the backend I am using an amazing Python library called &lt;a href=&#34;https://www.astropy.org/&#34;&gt;Astropy&lt;/a&gt; for conversion and &lt;a href=&#34;https://github.com/dabeaz/ply&#34;&gt;Ply&lt;/a&gt; for parsing. You can use all the units available in Astropy, the list can be found &lt;a href=&#34;https://docs.astropy.org/en/stable/units/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also use math constants like &lt;code&gt;pi&lt;/code&gt; and &lt;code&gt;e&lt;/code&gt;. Internally NotAeroCalc looks for unresolved names in &lt;code&gt;math&lt;/code&gt; library in Python. So if you haven&amp;rsquo;t created a &lt;code&gt;pi&lt;/code&gt; variable, &lt;code&gt;math.pi&lt;/code&gt; will be used.&lt;/p&gt;
&lt;h2 id=&#34;commands-in-notaerocalc&#34;&gt;Commands in NotAeroCalc&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;del x&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;deletes the variable named &lt;code&gt;x&lt;/code&gt; if defined. If not defined ignores the command.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;variables&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;lists all the variables defined in the current session.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;problem-solving-with-notaerocalc&#34;&gt;Problem Solving with NotAeroCalc&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s try to solve one problem using NotAeroCalc. Below is one of the homework problems from the course.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;An aircraft flies at an altitude of 30,000 feet. 
Determine the air temperature (in [K]), 
air pressure (in [Pa]) and air density (in [kg/m3]) 
at this altitude, according to the standard atmosphere.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following are the variables given.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;g = 9.80665 * m/s/s
T0 = 15*Celsius in Kelvin
P0 = 1013.25 * hectopascal
h = 30000 * foot in m
a = -6.5 * Kelvin/km
rho0 = 1.225 * kg/m^3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that some variables are given in &lt;code&gt;m&lt;/code&gt; whereas others are in &lt;code&gt;km&lt;/code&gt;. A good thing about using NotAeroCalc is that generally you do not need to worry about this discrepancy. However you can always use &lt;code&gt;expr in si&lt;/code&gt; to have unified values.&lt;/p&gt;
&lt;p&gt;Since 30,000 foot is in troposphere, we can use $ T_1 = T_0 + a*h $ formula to compute the temperature at 32000 foot.&lt;/p&gt;
&lt;p&gt;Once we know the temperature, we can use the following formula to compute the air density.&lt;/p&gt;
&lt;p&gt;$$
\frac{\rho_0}{\rho_1} = {\left( \frac{T_1}{T_0} \right)} ^{\frac{g}{R * a} - 1}
$$&lt;/p&gt;
&lt;p&gt;There are few things about &lt;code&gt;^&lt;/code&gt; operator in NotAeroCalc that you should keep in mind.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;a^b&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; has to be unit less. So expression like  &lt;code&gt;2^(3*m/(3*m))&lt;/code&gt; is allowed, but &lt;code&gt;2^(3*m/3*m)&lt;/code&gt; is not, as it simplifies to &lt;code&gt;2^(1*m^2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By default the units are not simplified, you might have to use &lt;code&gt;a^(b in si)&lt;/code&gt; if units in b cancel out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2^((3*m)/(300*cm))&lt;/code&gt; will give you an error. Use &lt;code&gt;2^((3*m)/(300*cm) in si)&lt;/code&gt; for now. I might fix this later.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;a&lt;/code&gt; has units, &lt;code&gt;b&lt;/code&gt; has to be like an integer. &lt;code&gt;b = 3.0&lt;/code&gt; is allowed, but &lt;code&gt;b = 3.14&lt;/code&gt; is not. So &lt;code&gt;(3*m)^2.0&lt;/code&gt; evaluates to &lt;code&gt;9*m^2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Finally, if &lt;code&gt;a&lt;/code&gt; does not have units, any power is allowed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the above density formula, the exponent is actually unit less. So everything works out.&lt;/p&gt;
&lt;p&gt;See the following recording for the whole solution.&lt;/p&gt;
&lt;script id=&#34;asciicast-oTGxU3t8WOPyI6orh3W0TBMfh&#34; src=&#34;https://asciinema.org/a/oTGxU3t8WOPyI6orh3W0TBMfh.js&#34; async&gt;&lt;/script&gt;
&lt;h2 id=&#34;what-is-next&#34;&gt;What is next?&lt;/h2&gt;
&lt;p&gt;As far as blogging goes, I plan to write the details of how NotAeroCalc was implemented, the nitty gritty details of Lex and Yacc, in the next part. It is not that difficult really.&lt;/p&gt;
&lt;p&gt;In the NotAeroCalc itself, I plan to add some features like having a database of formulas, and solving for a particular variables using other user defined variables.&lt;/p&gt;
&lt;p&gt;GitHub repository for this project can be found &lt;a href=&#34;https://github.com/DhruvPatel01/NotAeroCalc/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>How to find the number of unique elements in a stream?</title>
      <link>https://DhruvPatel01.github.io/posts/flajolet-martin/</link>
      <pubDate>Mon, 29 Mar 2021 14:36:16 +0530</pubDate>
      
      <guid>https://DhruvPatel01.github.io/posts/flajolet-martin/</guid>
      <description>So, I&amp;rsquo;ve been reading about streaming algorithms. Seems like the journey to streaming algorithms(aka Algorithms for Big Data) starts with the Flajolet-Martin algorithm.
The Problem We are given a sequence &amp;lt;u_0, u_1, u_2, u_3, ... , u_n&amp;gt; of n elements. Each u_i comes from the fixed set U of some finite size. We want to see how many elements are unique.
A simple Python code like below can solve the problem, if we have required memory.</description>
      <content>&lt;p&gt;So, I&amp;rsquo;ve been reading about streaming algorithms. Seems like the journey to streaming algorithms(aka Algorithms for Big Data) starts with the Flajolet-Martin algorithm.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;We are given a sequence &lt;code&gt;&amp;lt;u_0, u_1, u_2, u_3, ... , u_n&amp;gt;&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt; elements. Each &lt;code&gt;u_i&lt;/code&gt; comes from the fixed set &lt;code&gt;U&lt;/code&gt; of some finite size. We want to see how many elements are unique.&lt;/p&gt;
&lt;p&gt;A simple Python code like below can solve the problem, if we have required memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;card&lt;/span&gt;(seq):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; len(set(seq))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But we might not have a required memory. Hence we need to make a tradeoff. Use little memory and get an approximate answer or use &lt;code&gt;O(|U|)&lt;/code&gt; memory, and get the accurate answer. We will go with a small memory.&lt;/p&gt;
&lt;h2 id=&#34;flajolet-martin-algorithm-a-handwavy-explanation&#34;&gt;Flajolet-Martin Algorithm (a handwavy explanation)&lt;/h2&gt;
&lt;p&gt;The idea behind the FM algorithm is that each element generates an event. Same element has the same event associated with it. So if &lt;code&gt;x_2 == x&lt;/code&gt; generates &lt;code&gt;blahblah&lt;/code&gt;, and &lt;code&gt;x_100 == x&lt;/code&gt;, &lt;code&gt;blahblah&lt;/code&gt; will be generated. Summary is that you look for an event that is rare. Now if the events are generated from uniform distribution, as we see more and more &amp;ldquo;rare&amp;rdquo; events, we can be confident that we have seen &amp;ldquo;more&amp;rdquo; unique elements.&lt;/p&gt;
&lt;p&gt;Let me give an example. Say our event is the number of trailing zeros of the hash of the incoming element. So if the hash is &lt;code&gt;101010&lt;/code&gt;, the trail length is 1. On average how many different hashes would you have to see to see a trail length of 1? It&amp;rsquo;s a coin toss, on average you would have to toss a coin twice to get Heads. What if we wanted 5 heads and 1 tail? You would have to toss a coin 64 times to see that event.&lt;/p&gt;
&lt;p&gt;Wikipedia, Chapter-4 of Mining Massive Datasets, an original paper, and numerous other blogs describe this algorithm, so I won&amp;rsquo;t. I tried to implement this algorithm using the trail length as an event, but even with using 1000 hash functions I wasn&amp;rsquo;t able to get a reasonably close answer. So I will describe and implement what I believe is a better version of the same algorithm.&lt;/p&gt;
&lt;p&gt;Instead of trailing length, let our event generator be a function &lt;code&gt;f: U -&amp;gt; [0, 1]&lt;/code&gt;. If a function was chosen randomly from a family of eligible functions, we could expect that for any fixed stream, &lt;code&gt;&amp;lt;f(x_1), f(x_2), ...&amp;gt;&lt;/code&gt; would be uniformly random between 0 and 1. Now our definition of &amp;ldquo;rarity&amp;rdquo; is the smallest of &lt;code&gt;f(x_i)&lt;/code&gt;s. In a stream of 1000 elements, the smallest element you saw was 0.7?, I don&amp;rsquo;t think there are that many elements. Even if there were 2 unique elements, we should have seen the numbers &lt;code&gt;&amp;lt; 0.5&lt;/code&gt; with 0.75 probability. On the other hand, in a stream of 1000 elements, the smallest element you saw was 0.01?, looks like there are many unique elements.&lt;/p&gt;
&lt;p&gt;What exactly is many? Well as per this algorithm, on average, if the smallest number was &lt;code&gt;s&lt;/code&gt;, there were &lt;code&gt;1/s - 1&lt;/code&gt; unique elements in the stream. To answer why exactly this number, you might want to read &lt;a href=&#34;https://www.sketchingbigdata.org/fall20/lec/notes.pdf&#34;&gt;these lecture notes.&lt;/a&gt; Now this is not an exact answer, but with high probability it is close to the correct answer. If we want to be more certain, compute the number using different randomly picked functions then compute the average. Using the Law of Large numbers, as more and more experiments we do, the average gets closer and closer to the correct answer.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;h3 id=&#34;ingredients&#34;&gt;Ingredients&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A stream, (you know, to test the implementation.)&lt;/li&gt;
&lt;li&gt;Around say a thousand, randomly picked functions of the form &lt;code&gt;U -&amp;gt; [0, 1]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the stream, I will use &lt;a href=&#34;https://en.wikipedia.org/wiki/War_and_Peace&#34;&gt;Leo Tolstoy&amp;rsquo;s War and Peace&lt;/a&gt;. You can download one from &lt;a href=&#34;https://www.gutenberg.org/files/2600/2600-0.txt&#34;&gt;Project Gutenberg&lt;/a&gt;. I will use &lt;a href=&#34;https://spacy.io/&#34;&gt;spaCy&lt;/a&gt; to preprocess the text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; spacy.lang.en &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; English

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./data/war_and_peace.txt&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
nlp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; English(max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;len(data))
doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nlp(data)

stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [token&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower_ &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; token &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; doc 
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; (token&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_punct &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; token&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_space)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(stream[&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1010&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;speaker was the well known anna pávlovna schérer maid of
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To pick a function, first I generate 64 random bits, and then xor them with &lt;code&gt;hash(token)&lt;/code&gt; which is also 64 bit long on modern machines. First I will write a function that can generate many such &amp;ldquo;functions&amp;rdquo; in a batch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialise_hash_fn&lt;/span&gt;(n, seed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;):
    masks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):
        random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seed(seed&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i)
        masks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getrandbits(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; masks

masks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; initialise_hash_fn(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But xor gives me a number between 0 and 2^64-1, I need between 0 and 1. So will have to divide the resultant hash by 2^64-1.&lt;/p&gt;
&lt;p&gt;Finally, I process the stream. I&amp;rsquo;ve a thousand masks for thousand random functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_estimates&lt;/span&gt;(masks, stream):
    masks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(masks, dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uint64)
    stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([hash(t) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stream], dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uint64)
    mx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iinfo(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uint64)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;max
    mn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ones(len(masks))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; element &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stream:
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (masks &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; element)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mx
        mn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(mn &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; s, mn, s)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mn

estimates_raw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_estimates(masks, stream)
estimate_raw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(estimates_raw)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;estimate_raw &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, len(set(stream)))
&lt;span style=&#34;color:#75715e&#34;&gt;# prints, 18117.553711596098 17982&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So the actual answer is 17,982 and the estimated answer is 18,117. Error of around 150, not bad!&lt;/p&gt;
&lt;p&gt;We can also see the effect of using more and more random functions below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cumsum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; estimates_raw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cumsum()
z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arange(len(cumsum)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

estimates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cumsum&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;z
estimates &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;estimates &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(z, estimates)
plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;axhline(true_n_uniq, c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;images/cumulative_effects.png&#34; alt=&#34;plot&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://DhruvPatel01.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://DhruvPatel01.github.io/about/</guid>
      <description>Hi, I am Dhruv. As a Data Scientist at Myntra, I work on personalised size recommendation models. I graduated from the department of Computer Science and Automation at Indian Institute of Science in 2019. There I worked mostly on image segmentation problem and little bit on using machine learning on graph like structures.
You can reach out to me at hello at domain.</description>
      <content>&lt;p&gt;Hi, I am Dhruv. As a Data Scientist at &lt;a href=&#34;https://www.myntra.com&#34;&gt;Myntra&lt;/a&gt;, I work on personalised size recommendation models. I graduated from the department of Computer Science and Automation at Indian Institute of Science in 2019. There I worked mostly on image segmentation problem and little bit on using machine learning on graph like structures.&lt;/p&gt;
&lt;p&gt;You can reach out to me at &lt;code&gt;hello at domain&lt;/code&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Talks I have given</title>
      <link>https://DhruvPatel01.github.io/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://DhruvPatel01.github.io/talks/</guid>
      <description>Monte Carlo Markov Chains and PyMC3 The talk given at Myntra starts with an introduction to the Bayesian Linear Regression. I explain analytic solution and also introduce PyMC3 based solution. Then I proceed to explain Markov Chains that were used by PyMC internally. In the process Metropolis-Hastings and Gibbs chain are explained. The notebook is available here. For proofs there is a supplementary pdf.
On Double Precision Floating Points In this talk, I introduced subtleties of using floating points to the audience.</description>
      <content>&lt;h2 id=&#34;monte-carlo-markov-chains-and-pymc3&#34;&gt;Monte Carlo Markov Chains and PyMC3&lt;/h2&gt;
&lt;p&gt;The talk given at Myntra starts with an introduction to the Bayesian Linear Regression. I explain analytic solution and also introduce PyMC3 based solution. Then I proceed to explain Markov Chains that were used by PyMC internally. In the process Metropolis-Hastings and Gibbs chain are explained. The notebook is available &lt;a href=&#34;https://github.com/DhruvPatel01/myntra_talks/blob/master/bayesian_intro_with_pymc.ipynb&#34;&gt;here&lt;/a&gt;. For proofs there is a &lt;a href=&#34;https://github.com/DhruvPatel01/myntra_talks/blob/master/mcmc.pdf&#34;&gt;supplementary pdf&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;on-double-precision-floating-points&#34;&gt;On Double Precision Floating Points&lt;/h2&gt;
&lt;p&gt;In this talk, I introduced subtleties of using floating points to the audience. Talk starts with a classic mistake done in the Patriot Missile system, which caused the lives of 28 soldiers. Then I introduce a naive/intuitive algorithm of computing variance online (i.e. in one pass) and dangers of it. While explaining what caused the issues in the naive algorithm, I explain how different programming languages might give different results while working with floats(doubles). I then explain the Achilles&#39; heel of floating point arithmetic called catastrophic calculation, and how to avoid it. Talk concludes with Welford&amp;rsquo;s algorithm on computing variance online. Slides are available &lt;a href=&#34;https://DhruvPatel01.github.io/slides/floats.slides.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
